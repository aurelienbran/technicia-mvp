{
  "name": "Question Optimisée",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "question",
        "options": {}
      },
      "id": "a63c3da4-ebc7-47be-8c67-7fd02e44cb71",
      "name": "Webhook Question",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        540,
        380
      ],
      "webhookId": "2ef1d0c5-f63b-45e6-bc81-4acb53af121c"
    },
    {
      "parameters": {
        "url": "=http://vector-store:8000/search",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"{{ $json.question }}\",\n  \"limit\": 5,\n  \"searchType\": \"hybrid\",\n  \"includeImages\": true\n}",
        "options": {}
      },
      "id": "bb6a9cac-1aca-47a0-92fa-7a56caf3c2c3",
      "name": "Recherche vectorielle",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        820,
        380
      ]
    },
    {
      "parameters": {
        "functionCode": "// Préparer le contexte pour Claude\nconst results = items[0].json.results || [];\nconst question = items[0].json.question || items[0].json.original_query || \"\";\n\n// Extraire le texte des résultats\nlet contextTexts = [];\nlet images = [];\n\nresults.forEach(result => {\n  // Ajouter le contenu textuel\n  if (result.payload && result.payload.content) {\n    contextTexts.push(result.payload.content);\n  }\n  \n  // Récupérer les images\n  if (result.payload && result.payload.type === 'image' && result.payload.imagePath) {\n    images.push({\n      path: result.payload.imagePath,\n      caption: result.payload.caption || 'Schéma technique'\n    });\n  }\n});\n\n// Limiter la taille du contexte (pour éviter de dépasser les limites de l'API)\nlet context = contextTexts.join('\\n\\n').substring(0, 10000);\n\n// Eliminer les doublons d'images\nconst uniqueImages = Array.from(new Set(images.map(img => img.path)))\n  .map(path => {\n    return images.find(img => img.path === path);\n  });\n\nreturn [{\n  json: {\n    question,\n    context,\n    images: uniqueImages.slice(0, 3) // Limiter à 3 images max\n  }\n}];"
      },
      "id": "3f0761a6-4fd1-4da9-a9f9-08a47cd5da78",
      "name": "Préparer Contexte",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1100,
        380
      ]
    },
    {
      "parameters": {
        "url": "=http://claude-service:8004/ask",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"question\": \"{{ $json.question }}\",\n  \"context\": \"{{ $json.context }}\",\n  \"max_tokens\": 1000,\n  \"temperature\": 0.3\n}",
        "options": {}
      },
      "id": "c1e8af92-7fa5-4e46-ab6c-c22a73a60ef7",
      "name": "Appel Claude",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1360,
        380
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "1",
          "name": "Claude API Authentication"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Préparer la réponse finale avec les images\nconst answer = items[0].json.answer || items[0].json.response || \"Je n'ai pas pu générer de réponse.\";\nconst images = items[0].json.images || [];\n\n// Formater les images pour l'affichage\nconst formattedImages = images.map(image => {\n  return {\n    url: image.path.replace('/tmp/technicia-docs/', '/images/'),\n    caption: image.caption || 'Schéma technique'\n  };\n});\n\nreturn [{\n  json: {\n    answer,\n    images: formattedImages,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "4d1ca45e-04fd-424e-aa4e-73af6de7d4a8",
      "name": "Formater Réponse",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1620,
        380
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "7a9d3b27-c05d-486b-8d82-b3cbaf6d9fa2",
      "name": "Répondre au Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1880,
        380
      ]
    }
  ],
  "connections": {
    "Webhook Question": {
      "main": [
        [
          {
            "node": "Recherche vectorielle",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recherche vectorielle": {
      "main": [
        [
          {
            "node": "Préparer Contexte",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Préparer Contexte": {
      "main": [
        [
          {
            "node": "Appel Claude",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Appel Claude": {
      "main": [
        [
          {
            "node": "Formater Réponse",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formater Réponse": {
      "main": [
        [
          {
            "node": "Répondre au Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "id": "1",
      "name": "TechnicIA",
      "color": "#50e3c2"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-04-01T00:00:00.000Z",
  "versionId": "cbb88932-9e21-4868-b0c9-8b01cf48faa2"
}
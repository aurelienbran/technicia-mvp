{
  "name": "TechnicIA Document Ingestion - Simplifié",
  "nodes": [
    {
      "parameters": {
        "path": "upload",
        "responseMode": "lastNode",
        "options": {
          "binaryData": true,
          "bodyContentType": "multipart/form-data"
        },
        "httpMethod": "POST"
      },
      "name": "Document Upload Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "upload"
    },
    {
      "parameters": {
        "jsCode": "// Vérification et validation du fichier PDF\n// Analyse les données binaires et vérifie la taille maximale\n\n// Déterminer si des données binaires sont présentes\nlet hasBinaryData = false;\nlet fileName = 'document.pdf';\nlet fileSize = 0;\nlet fileType = '';\nlet fileMimeType = '';\nlet errors = [];\n\nif ($input.item && $input.item.binary) {\n  const binaryProperties = Object.keys($input.item.binary);\n  if (binaryProperties.length > 0) {\n    hasBinaryData = true;\n    const firstProperty = binaryProperties[0];\n    \n    const fileData = $input.item.binary[firstProperty];\n    if (fileData) {\n      fileName = fileData.fileName || fileName;\n      fileSize = fileData.fileSize || fileSize;\n      fileMimeType = fileData.mimeType || '';\n      \n      // Vérifier si c'est un PDF\n      if (fileMimeType !== 'application/pdf') {\n        errors.push('Le fichier doit être au format PDF');\n      }\n      \n      // Vérifier la taille maximale (150 Mo)\n      const MAX_SIZE = 150 * 1024 * 1024; // 150 Mo en octets\n      if (fileSize > MAX_SIZE) {\n        errors.push(`Le fichier est trop volumineux (${Math.round(fileSize / (1024 * 1024))} Mo). Maximum autorisé: 150 Mo`);\n      }\n    }\n  } else {\n    errors.push('Aucune donnée binaire trouvée');\n  }\n} else {\n  errors.push('Aucun fichier n\\'a été téléchargé');\n}\n\n// Préparer l'objet de sortie avec les métadonnées\nconst output = {\n  success: errors.length === 0,\n  errors: errors,\n  document_id: hasBinaryData ? 'doc-' + Date.now() : null,\n  document_name: fileName,\n  document_size: fileSize,\n  document_type: fileMimeType,\n  processing_status: errors.length === 0 ? 'ready_for_extraction' : 'rejected',\n  large_document: fileSize > 25 * 1024 * 1024, // Marquer les documents > 25 Mo comme \"larges\"\n  timestamp: new Date().toISOString()\n};\n\nreturn output;"
      },
      "name": "Validate Document",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [420, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.success }}",
              "operation": "equal",
              "value2": "true"
            }
          ]
        }
      },
      "name": "Document Valid?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [600, 300]
    },
    {
      "parameters": {
        "functionName": "writeBinaryFile",
        "fileName": "={{ $json.document_id + '/' + $json.document_name }}",
        "fileContent": "={{ $binary.data }}"
      },
      "name": "Store Document",
      "type": "n8n-nodes-base.executeFunction",
      "typeVersion": 1,
      "position": [780, 220]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.large_document }}",
              "value2": true
            }
          ]
        }
      },
      "name": "Document Size Router",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [960, 220]
    },
    {
      "parameters": {
        "url": "=http://document-processor:5001/process",
        "allowUnauthorizedCerts": true,
        "method": "POST",
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "document_path",
              "value": "={{ $json.document_id + '/' + $json.document_name }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Process Large Document",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1140, 100],
      "continueOnFail": true
    },
    {
      "parameters": {
        "url": "=http://document-processor:5000/extract",
        "allowUnauthorizedCerts": true,
        "method": "POST",
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "document_path",
              "value": "={{ $json.document_id + '/' + $json.document_name }}"
            },
            {
              "name": "extract_images",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "name": "Process with Document AI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1140, 320],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Ce nœud gère à la fois les réponses du processeur standard et du processeur pour gros documents\n\n// Vérifier si nous avons reçu une réponse d'erreur\nconst hasError = $json.error || $json.success === false;\n\nif (hasError) {\n  // Préparer une structure d'erreur standardisée\n  return {\n    success: false,\n    error_details: {\n      phase: 'document_extraction',\n      error: $json.error || 'Échec de l\\'extraction du document',\n      statusCode: $json.statusCode || 500\n    },\n    document_id: $json.document_id,\n    document_name: $json.document_name || ''\n  };\n}\n\n// Pour le traitement de gros documents - répond immédiatement pour les requêtes asynchrones\nif ($json.processing_type && $json.processing_type === 'async') {\n  return {\n    success: true,\n    document_id: $json.document_id,\n    document_name: $json.document_name,\n    processing_status: 'processing',\n    estimated_completion: $json.estimated_completion || new Date(Date.now() + 60000).toISOString(),\n    message: 'Le document volumineux est en cours de traitement'\n  };\n}\n\n// Transmet les données régulières d'extraction pour le traitement suivant\nreturn $json;"
      },
      "name": "Process Document Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1320, 220]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.success !== false }}"
            }
          ]
        }
      },
      "name": "Extraction Success?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1500, 220]
    },
    {
      "parameters": {
        "url": "=http://vision-classifier:5000/classify-images",
        "allowUnauthorizedCerts": true,
        "method": "POST",
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "images",
              "value": "={{ $json.images }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Classify Images with Vision AI",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1680, 160],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Traitement des résultats de Document AI et Vision AI\n\n// Vérifier si nous avons reçu une réponse d'erreur de Vision AI\nconst hasError = $json.error || $json.success === false;\n\nif (hasError) {\n  // Préparer une structure d'erreur standardisée\n  return {\n    success: false,\n    error_details: {\n      phase: 'vision_classification',\n      error: $json.error || 'Échec de la classification des images',\n      statusCode: $json.statusCode || 500\n    },\n    document_id: $json.document_id,\n    document_name: $json.document_name || ''\n  };\n}\n\n// Récupérer les données Document AI\nconst docAiResults = $node[\"Process Document Result\"].json || {};\nconst docText = docAiResults.text_blocks || [];\nconst docImages = docAiResults.images || [];\n\n// Récupérer les données Vision AI\nconst visionResults = $json || {};\nconst classifiedImages = visionResults.classified_images || [];\n\n// Fusionner les informations d'images\nconst imagesWithClassification = docImages.map(img => {\n  const classification = classifiedImages.find(\n    classImg => classImg.image_id === img.image_id\n  ) || { classification: 'unknown', confidence: 0 };\n  \n  return {\n    ...img,\n    type: classification.classification,\n    confidence: classification.confidence,\n    is_technical: classification.classification === 'technical_diagram',\n    contains_text: classification.contains_text || false,\n    ocr_needed: classification.classification === 'technical_diagram' && classification.contains_text\n  };\n});\n\n// Préparer la structure de sortie\nreturn {\n  document_id: docAiResults.document_id,\n  document_name: docAiResults.document_name,\n  text_blocks: docText,\n  images: imagesWithClassification,\n  ready_for_vectorization: true,\n  stats: {\n    text_blocks_count: docText.length,\n    images_count: docImages.length,\n    technical_diagrams_count: imagesWithClassification.filter(img => img.is_technical).length,\n    decorative_images_count: imagesWithClassification.filter(img => !img.is_technical).length\n  },\n  timestamp: new Date().toISOString()\n};"
      },
      "name": "Process Vision Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1860, 160]
    },
    {
      "parameters": {
        "url": "=http://vector-service:5000/vectorize",
        "allowUnauthorizedCerts": true,
        "method": "POST",
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "text_blocks",
              "value": "={{ JSON.stringify($json.text_blocks) }}"
            },
            {
              "name": "images",
              "value": "={{ JSON.stringify($json.images.filter(img => img.is_technical)) }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Vectorize Content",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2040, 160],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Traitement des résultats de la vectorisation\n\n// Vérifier si nous avons reçu une réponse d'erreur\nconst hasError = $json.error || $json.success === false;\n\nif (hasError) {\n  // Préparer une structure d'erreur standardisée\n  return {\n    success: false,\n    error_details: {\n      phase: 'vectorization',\n      error: $json.error || 'Échec de la vectorisation du contenu',\n      statusCode: $json.statusCode || 500\n    },\n    document_id: $json.document_id,\n    document_name: $json.document_name || ''\n  };\n}\n\nreturn $json;"
      },
      "name": "Process Vectorization Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [2220, 160]
    },
    {
      "parameters": {
        "url": "=http://vector-service:5000/index",
        "allowUnauthorizedCerts": true,
        "method": "POST",
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "collection_name",
              "value": "technicia"
            },
            {
              "name": "vectors",
              "value": "={{ $json.vectors }}"
            },
            {
              "name": "metadata",
              "value": "={{ $json.metadata }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Index in Qdrant",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2400, 160],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Traitement des résultats de l'indexation et préparation de la réponse finale\n\n// Vérifier si nous avons reçu une réponse d'erreur\nconst hasError = $json.error || $json.success === false;\n\nif (hasError) {\n  // Préparer une structure d'erreur standardisée\n  return {\n    success: false,\n    error_details: {\n      phase: 'indexation',\n      error: $json.error || 'Échec de l\\'indexation dans Qdrant',\n      statusCode: $json.statusCode || 500\n    },\n    document_id: $json.document_id,\n    document_name: $json.document_name || ''\n  };\n}\n\n// Données d'entrée\nconst vectorizationResults = $node[\"Process Vectorization Results\"].json || {};\nconst indexingResults = $json || {};\n\n// Statistiques sur la vectorisation\nconst vectorStats = vectorizationResults.stats || {\n  text_chunks_vectorized: 0,\n  images_vectorized: 0\n};\n\n// Statistiques sur l'indexation\nconst indexStats = indexingResults.stats || {\n  points_indexed: 0,\n  index_size_kb: 0\n};\n\n// Préparer la réponse finale\nreturn {\n  success: true,\n  document_id: vectorizationResults.document_id,\n  document_name: vectorizationResults.document_name,\n  processing_completed: true,\n  processing_stats: {\n    text_chunks_count: vectorStats.text_chunks_vectorized,\n    images_count: vectorStats.images_vectorized,\n    total_vectors: indexStats.points_indexed,\n    vector_index_size_kb: indexStats.index_size_kb\n  },\n  retrieval_ready: true,\n  processing_time_ms: Date.now() - parseInt(vectorizationResults.document_id.split('-')[1] || 0),\n  timestamp: new Date().toISOString()\n};"
      },
      "name": "Process Indexation Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [2580, 160]
    },
    {
      "parameters": {
        "jsCode": "// Préparation d'une réponse d'erreur unifiée\n\n// Récupérer les informations d'erreur\nconst errorDetails = $json.error_details || {\n  phase: 'unknown',\n  error: 'Erreur inconnue',\n  statusCode: 500\n};\n\n// Récupérer les informations sur le document depuis le nœud de validation si disponible\nlet documentInfo;\nif ($json.document_id) {\n  documentInfo = {\n    document_id: $json.document_id,\n    document_name: $json.document_name\n  };\n} else {\n  // Si non disponible dans l'entrée actuelle, essayer de récupérer depuis le nœud de validation\n  documentInfo = {\n    document_id: $node[\"Validate Document\"].json.document_id || 'unknown',\n    document_name: $node[\"Validate Document\"].json.document_name || 'unknown'\n  };\n}\n\n// Combiner pour la réponse d'erreur\nreturn {\n  success: false,\n  ...documentInfo,\n  error_details: {\n    ...errorDetails,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "name": "Prepare Error Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1680, 320]
    },
    {
      "parameters": {
        "url": "=http://frontend:3000/api/notifications",
        "allowUnauthorizedCerts": true,
        "method": "POST",
        "bodyParametersUi": {
          "parameter": [
            {
              "name": "type",
              "value": "={{ $json.success ? 'document_processed' : 'document_error' }}"
            },
            {
              "name": "document_id",
              "value": "={{ $json.document_id }}"
            },
            {
              "name": "document_name",
              "value": "={{ $json.document_name }}"
            },
            {
              "name": "data",
              "value": "={{ $json.success ? JSON.stringify($json.processing_stats) : JSON.stringify($json.error_details) }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Notify Frontend",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2760, 240],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Journalisation unifiée (succès ou erreur)\n\n// Déterminer si c'est un succès ou une erreur\nconst isSuccess = $json.success !== false;\n\n// Créer une structure commune pour le logging\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  document_id: $json.document_id,\n  document_name: $json.document_name,\n  success: isSuccess\n};\n\n// Ajouter des informations spécifiques selon le type\nif (isSuccess) {\n  // Informations de succès\n  logEntry.processing_stats = $json.processing_stats || {};\n  logEntry.processing_time_ms = $json.processing_time_ms || 0;\n  logEntry.status = 'completed';\n} else {\n  // Informations d'erreur\n  logEntry.error_phase = $json.error_details?.phase || 'unknown';\n  logEntry.error_message = $json.error_details?.error || 'Erreur inconnue';\n  logEntry.status_code = $json.error_details?.statusCode || 500;\n  logEntry.status = 'failed';\n}\n\nreturn logEntry;"
      },
      "name": "Log Activity",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [2940, 240]
    },
    {
      "parameters": {
        "jsCode": "// Finalisation du workflow\n\n// Étape finale pour un nettoyage ou des actions additionnelles\nreturn {\n  workflow_completed: true,\n  document_id: $json.document_id,\n  status: $json.status,\n  timestamp: new Date().toISOString()\n};"
      },
      "name": "Workflow End",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [3120, 240]
    },
    {
      "parameters": {
        "content": "={{ JSON.stringify({success: false, errors: $json.errors || ['Format ou taille de fichier invalide']}) }}",
        "options": {
          "responseCode": 400
        }
      },
      "name": "Return Validation Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [780, 420]
    },
    {
      "parameters": {
        "content": "={{ JSON.stringify({success: true, document_id: $json.document_id, status: 'processing', message: 'Document accepté et en cours de traitement'}) }}",
        "options": {
          "responseCode": 200
        }
      },
      "name": "Return Initial Success",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1320, 420]
    }
  ],
  "connections": {
    "Document Upload Webhook": {
      "main": [
        [
          {"node": "Validate Document", "type": "main", "index": 0}
        ]
      ]
    },
    "Validate Document": {
      "main": [
        [
          {"node": "Document Valid?", "type": "main", "index": 0}
        ]
      ]
    },
    "Document Valid?": {
      "main": [
        [
          {"node": "Store Document", "type": "main", "index": 0}
        ],
        [
          {"node": "Return Validation Error", "type": "main", "index": 0}
        ]
      ]
    },
    "Store Document": {
      "main": [
        [
          {"node": "Document Size Router", "type": "main", "index": 0},
          {"node": "Return Initial Success", "type": "main", "index": 0}
        ]
      ]
    },
    "Document Size Router": {
      "main": [
        [
          {"node": "Process Large Document", "type": "main", "index": 0}
        ],
        [
          {"node": "Process with Document AI", "type": "main", "index": 0}
        ]
      ]
    },
    "Process Large Document": {
      "main": [
        [
          {"node": "Process Document Result", "type": "main", "index": 0}
        ]
      ]
    },
    "Process with Document AI": {
      "main": [
        [
          {"node": "Process Document Result", "type": "main", "index": 0}
        ]
      ]
    },
    "Process Document Result": {
      "main": [
        [
          {"node": "Extraction Success?", "type": "main", "index": 0}
        ]
      ]
    },
    "Extraction Success?": {
      "main": [
        [
          {"node": "Classify Images with Vision AI", "type": "main", "index": 0}
        ],
        [
          {"node": "Prepare Error Response", "type": "main", "index": 0}
        ]
      ]
    },
    "Classify Images with Vision AI": {
      "main": [
        [
          {"node": "Process Vision Results", "type": "main", "index": 0}
        ]
      ]
    },
    "Process Vision Results": {
      "main": [
        [
          {"node": "Vectorize Content", "type": "main", "index": 0}
        ]
      ]
    },
    "Vectorize Content": {
      "main": [
        [
          {"node": "Process Vectorization Results", "type": "main", "index": 0}
        ]
      ]
    },
    "Process Vectorization Results": {
      "main": [
        [
          {"node": "Index in Qdrant", "type": "main", "index": 0}
        ]
      ]
    },
    "Index in Qdrant": {
      "main": [
        [
          {"node": "Process Indexation Results", "type": "main", "index": 0}
        ]
      ]
    },
    "Process Indexation Results": {
      "main": [
        [
          {"node": "Notify Frontend", "type": "main", "index": 0}
        ]
      ]
    },
    "Prepare Error Response": {
      "main": [
        [
          {"node": "Notify Frontend", "type": "main", "index": 0}
        ]
      ]
    },
    "Notify Frontend": {
      "main": [
        [
          {"node": "Log Activity", "type": "main", "index": 0}
        ]
      ]
    },
    "Log Activity": {
      "main": [
        [
          {"node": "Workflow End", "type": "main", "index": 0}
        ]
      ]
    }
  }
}
{
  "name": "Diagnostic TechnicIA (Corrigé)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "diagnostic",
        "options": {}
      },
      "id": "e63c3da4-ebc7-47be-8c67-7fd02e44cb75",
      "name": "Webhook Diagnostic",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        540,
        380
      ],
      "webhookId": "2ef1d0c5-f63b-45e6-bc81-4acb53af222d"
    },
    {
      "parameters": {
        "functionCode": "// Valider et préparer les symptômes\nconst symptoms = items[0].json.symptoms || \"\";\nconst equipment = items[0].json.equipment || \"\";\n\nif (!symptoms || symptoms.trim() === \"\") {\n  throw new Error(\"Symptômes manquants - veuillez décrire les symptômes observés\");\n}\n\nreturn [{\n  json: {\n    symptoms,\n    equipment,\n    query: `diagnostic ${symptoms} ${equipment}`.trim(),\n    limit: 8,\n    search_type: \"hybrid\",\n    include_images: true\n  }\n}];"
      },
      "id": "d43ca24e-fb62-49c7-9f24-8c35d1ad4e34",
      "name": "Préparer Recherche",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        740,
        380
      ]
    },
    {
      "parameters": {
        "url": "=http://vector-store:8000/search",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"{{ $json.query }}\",\n  \"limit\": {{ $json.limit }},\n  \"search_type\": \"{{ $json.search_type }}\",\n  \"include_images\": {{ $json.include_images }}\n}",
        "options": {}
      },
      "id": "cb6a9cac-1aca-47a0-92fa-7a56caf3c2c9",
      "name": "Recherche initiale",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        940,
        380
      ]
    },
    {
      "parameters": {
        "functionCode": "// Préparer le contexte pour Claude\nconst results = items[0].json.results || [];\nconst symptoms = items[0].json.symptoms || \"\";\nconst equipment = items[0].json.equipment || \"\";\n\n// Extraire le texte des résultats\nlet contextTexts = [];\nlet images = [];\n\nresults.forEach(result => {\n  // Ajouter le contenu textuel\n  if (result.payload && result.payload.content) {\n    contextTexts.push(result.payload.content);\n  }\n  \n  // Récupérer les images\n  if (result.payload && result.payload.type === 'image' && result.payload.imagePath) {\n    images.push({\n      path: result.payload.imagePath,\n      caption: result.payload.caption || 'Schéma technique'\n    });\n  }\n});\n\n// Limiter la taille du contexte\nlet context = contextTexts.join('\\n\\n').substring(0, 12000);\n\n// Eliminer les doublons d'images\nconst uniqueImages = Array.from(new Set(images.map(img => img.path)))\n  .map(path => {\n    return images.find(img => img.path === path);\n  });\n\nreturn [{\n  json: {\n    symptoms,\n    equipment,\n    context,\n    images: uniqueImages.slice(0, 3),\n    session_id: Math.random().toString(36).substring(2, 15),\n    step: 1,\n    max_tokens: 1500,\n    temperature: 0.2\n  }\n}];"
      },
      "id": "4f0761a6-4fd1-4da9-a9f9-08a47cd5da89",
      "name": "Initialiser Diagnostic",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1140,
        380
      ]
    },
    {
      "parameters": {
        "url": "=http://claude-service:8004/diagnostic",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"symptoms\": \"{{ $json.symptoms }}\",\n  \"equipment\": \"{{ $json.equipment }}\",\n  \"context\": \"{{ $json.context }}\",\n  \"session_id\": \"{{ $json.session_id }}\",\n  \"step\": {{ $json.step }},\n  \"max_tokens\": {{ $json.max_tokens }},\n  \"temperature\": {{ $json.temperature }}\n}",
        "options": {}
      },
      "id": "d1e8af92-7fa5-4e46-ab6c-c22a73a60ef9",
      "name": "Générer Plan Diagnostic",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        1340,
        380
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "1",
          "name": "Claude API Authentication"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Parser et structurer le plan de diagnostic\nconst diagnosticPlan = items[0].json.diagnostic_plan || [];\nconst sessionId = items[0].json.session_id;\nconst images = items[0].json.images || [];\n\n// Structurer le plan et les étapes\nconst structuredPlan = {\n  sessionId,\n  title: items[0].json.title || \"Plan de diagnostic\",\n  symptoms: items[0].json.symptoms,\n  equipment: items[0].json.equipment,\n  overview: items[0].json.overview || \"Plan de diagnostic basé sur les symptômes décrits\",\n  steps: diagnosticPlan,\n  images: images.map(img => ({\n    url: img.path.replace('/tmp/technicia-docs/', '/images/'),\n    caption: img.caption || 'Schéma technique'\n  })),\n  currentStep: 0,\n  totalSteps: diagnosticPlan.length,\n  status: \"ready\"\n};\n\nreturn [{\n  json: structuredPlan\n}];"
      },
      "id": "5d1ca45e-04fd-424e-aa4e-73af6de7d4a9",
      "name": "Structurer Plan",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1540,
        380
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "8a9d3b27-c05d-486b-8d82-b3cbaf6d9fa6",
      "name": "Répondre au Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1740,
        380
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "diagnostic/step",
        "options": {}
      },
      "id": "a63c3da6-ebc7-47be-8c67-7fd02e44cb79",
      "name": "Webhook Étape Diagnostic",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        540,
        620
      ],
      "webhookId": "7ef1d0c5-f63b-45e6-bc81-4acb53af673d"
    },
    {
      "parameters": {
        "functionCode": "// Valider les données d'entrée pour l'étape\nconst sessionId = items[0].json.sessionId;\nconst stepIndex = items[0].json.stepIndex || 0;\nconst stepResult = items[0].json.stepResult || \"\";\nconst previousContext = items[0].json.previousContext || [];\n\nif (!sessionId) {\n  throw new Error(\"sessionId manquant - impossible de continuer le diagnostic\");\n}\n\nreturn [{\n  json: {\n    session_id: sessionId,\n    step_index: stepIndex,\n    step_result: stepResult,\n    previous_context: previousContext,\n    max_tokens: 800\n  }\n}];"
      },
      "id": "1b2ca24e-fb62-49c7-9f24-8c35d1ad4e56",
      "name": "Préparer Requête Étape",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        740,
        620
      ]
    },
    {
      "parameters": {
        "url": "=http://claude-service:8004/diagnostic/step",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "method": "POST",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"session_id\": \"{{ $json.session_id }}\",\n  \"step_index\": {{ $json.step_index }},\n  \"step_result\": \"{{ $json.step_result }}\",\n  \"previous_context\": {{ JSON.stringify($json.previous_context || []) }},\n  \"max_tokens\": {{ $json.max_tokens }}\n}",
        "options": {}
      },
      "id": "d1e8af96-7fa5-4e46-ab6c-c22a73a60ef1",
      "name": "Traiter Étape",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 2,
      "position": [
        940,
        620
      ],
      "credentials": {
        "httpHeaderAuth": {
          "id": "1",
          "name": "Claude API Authentication"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Mettre à jour l'état du diagnostic\nconst result = items[0].json;\nconst sessionId = result.session_id;\nconst stepIndex = result.step_index;\nconst nextStep = result.next_step || {};\nconst diagnostic = result.diagnostic || {};\n\n// Structurer la réponse\nconst response = {\n  sessionId,\n  currentStep: stepIndex,\n  nextStepIndex: nextStep.index || stepIndex + 1,\n  stepComplete: true,\n  stepResult: result.interpretation || \"Étape complétée\",\n  nextStepInstructions: nextStep.instructions || \"\",\n  status: nextStep.isFinal ? \"complete\" : \"in_progress\",\n  possibleCauses: diagnostic.possible_causes || [],\n  recommendedFixes: diagnostic.recommended_fixes || [],\n  diagnosticSummary: diagnostic.summary || \"\"\n};\n\nreturn [{\n  json: response\n}];"
      },
      "id": "5d1ca49e-04fd-424e-aa4e-73af6de7d4b1",
      "name": "Structurer Réponse Étape",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1140,
        620
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "8a9d3b57-c05d-486b-8d82-b3cbaf6d9fa8",
      "name": "Répondre Étape",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1340,
        620
      ]
    },
    {
      "parameters": {
        "content": "## Workflow de Diagnostic TechnicIA (Corrigé)\nCe workflow permet un diagnostic pas-à-pas des problèmes techniques:\n1. Initialisation du diagnostic avec description des symptômes\n2. Génération d'un plan de diagnostic structuré\n3. Exécution progressive des étapes de vérification\n4. Adaptation du diagnostic en fonction des résultats\n5. Fourniture de causes probables et solutions recommandées",
        "height": 240,
        "width": 420
      },
      "id": "2d9de67b-cb4a-4e27-a4a2-b7ace4ad4ced",
      "name": "Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        320,
        220
      ]
    }
  ],
  "connections": {
    "Webhook Diagnostic": {
      "main": [
        [
          {
            "node": "Préparer Recherche",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Préparer Recherche": {
      "main": [
        [
          {
            "node": "Recherche initiale",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Recherche initiale": {
      "main": [
        [
          {
            "node": "Initialiser Diagnostic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialiser Diagnostic": {
      "main": [
        [
          {
            "node": "Générer Plan Diagnostic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Générer Plan Diagnostic": {
      "main": [
        [
          {
            "node": "Structurer Plan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structurer Plan": {
      "main": [
        [
          {
            "node": "Répondre au Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Étape Diagnostic": {
      "main": [
        [
          {
            "node": "Préparer Requête Étape",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Préparer Requête Étape": {
      "main": [
        [
          {
            "node": "Traiter Étape",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Traiter Étape": {
      "main": [
        [
          {
            "node": "Structurer Réponse Étape",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structurer Réponse Étape": {
      "main": [
        [
          {
            "node": "Répondre Étape",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "id": "1",
      "name": "TechnicIA",
      "color": "#50e3c2"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-04-01T00:00:00.000Z",
  "versionId": "eb6774d2-61d9-4c3d-a4d7-f65a6ac1bb23"
}
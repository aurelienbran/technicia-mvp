version: '3.8'

services:
  # Base de données vectorielle
  qdrant:
    image: qdrant/qdrant:latest
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"
    networks:
      - technicia_network
    environment:
      - QDRANT_ALLOW_CORS=true
    # Remplacer le health check par une version plus robuste
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Service de traitement des documents
  document-processor:
    build:
      context: ./services/document-processor
    volumes:
      - shared_data:/tmp/technicia-docs
    ports:
      - "8001:8001"
    networks:
      - technicia_network
    environment:
      - DOCUMENT_AI_PROJECT=${DOCUMENT_AI_PROJECT}
      - DOCUMENT_AI_LOCATION=${DOCUMENT_AI_LOCATION}
      - DOCUMENT_AI_PROCESSOR_ID=${DOCUMENT_AI_PROCESSOR_ID}
      - TEMP_DIR=/tmp/technicia-docs
      - GOOGLE_APPLICATION_CREDENTIALS=/app/google-credentials.json
    depends_on:
      # Utilise service_started au lieu de service_healthy pour éviter les blocages
      qdrant:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Service d'analyse des schémas
  schema-analyzer:
    build:
      context: ./services/schema-analyzer
    volumes:
      - shared_data:/tmp/technicia-docs
    ports:
      - "8002:8002"
    networks:
      - technicia_network
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/app/google-credentials.json
    depends_on:
      qdrant:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8002/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Service de vectorisation
  vector-engine:
    build:
      context: ./services/vector-engine
    volumes:
      - shared_data:/tmp/technicia-docs
    ports:
      - "8003:8003"
    networks:
      - technicia_network
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - COLLECTION_NAME=${QDRANT_COLLECTION:-technicia}
      - VOYAGE_API_KEY=${VOYAGE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    depends_on:
      qdrant:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8003/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Service de recherche vectorielle
  vector-store:
    build:
      context: ./services/vector-store
    ports:
      - "8000:8000"
    networks:
      - technicia_network
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - COLLECTION_NAME=${QDRANT_COLLECTION:-technicia}
      - VOYAGE_API_KEY=${VOYAGE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    depends_on:
      qdrant:
        condition: service_started
      vector-engine:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Service d'interaction avec Claude
  claude-service:
    build:
      context: ./services/claude-service
    ports:
      - "8004:8004"
    networks:
      - technicia_network
    environment:
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ANTHROPIC_MODEL=${ANTHROPIC_MODEL:-claude-3-5-sonnet-20240620}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8004/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Orchestrateur n8n
  n8n:
    image: n8nio/n8n:latest
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - shared_data:/tmp/technicia-docs
      - ./workflows:/tmp/workflows
    networks:
      - technicia_network
    environment:
      # Support pour les deux méthodes d'authentification (utilisez-en une seule à la fois)
      
      # Option 1: Authentification basique (désactivée si vous utilisez la clé d'encryption)
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-false}
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-TechnicIA2025!}
      
      # Option 2: Authentification par clé d'encryption (recommandée pour production)
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY:-8e998dfe3bb64abd8937d9ea7f0a2c2f61a275354a2f194c}
      
      # Configuration pour le déploiement sur VPS
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=${N8N_PORT:-5678}
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - N8N_SECURE_COOKIE=${N8N_SECURE_COOKIE:-false}
      - N8N_PAYLOAD_SIZE_MAX=${N8N_PAYLOAD_SIZE_MAX:-200MB}
      
      # Variables pour les services
      - NODE_ENV=production
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - ANTHROPIC_MODEL=${ANTHROPIC_MODEL:-claude-3-5-sonnet-20240620}
      - VOYAGE_API_KEY=${VOYAGE_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    depends_on:
      document-processor:
        condition: service_started
      schema-analyzer:
        condition: service_started
      vector-engine:
        condition: service_started
      vector-store:
        condition: service_started
      claude-service:
        condition: service_started

  # Frontend (pour le MVP)
  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:80"
    networks:
      - technicia_network
    depends_on:
      - n8n

networks:
  technicia_network:
    driver: bridge

volumes:
  qdrant_data:
  n8n_data:
  shared_data:
#!/bin/bash

# Script de d√©marrage pour TechnicIA MVP
# Usage: ./start-technicia.sh [option]
# Options:
#   --build           Construit toutes les images Docker
#   --logs            Affiche les logs en temps r√©el apr√®s le d√©marrage
#   --clean           Supprime les volumes et red√©marre tout proprement
#   --status          Affiche le statut des services
#   --stop            Arr√™te tous les services
#   --import FILE.pdf Importe un fichier PDF pour test
#   --setup-optimized Configure n8n avec les workflows optimis√©s
#   --setup-corrected Configure n8n avec les workflows corrig√©s
#   -h, --help        Affiche cette aide

SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
PROJECT_DIR=$(dirname "$SCRIPT_DIR")
COMPOSE_FILE="$PROJECT_DIR/docker-compose.yml"
ENV_FILE="$PROJECT_DIR/.env"
ENV_EXAMPLE="$PROJECT_DIR/.env.example"
WORKFLOWS_DIR="$PROJECT_DIR/workflows"
OPTIMIZED_INGESTION="$WORKFLOWS_DIR/technicia-ingestion-optimized.json"
OPTIMIZED_QUESTION="$WORKFLOWS_DIR/question-optimized.json"
OPTIMIZED_DIAGNOSTIC="$WORKFLOWS_DIR/diagnostic-optimized.json"
CORRECTED_INGESTION="$WORKFLOWS_DIR/technicia-ingestion-corrected.json"
CORRECTED_QUESTION="$WORKFLOWS_DIR/question-corrected.json"
CORRECTED_DIAGNOSTIC="$WORKFLOWS_DIR/diagnostic-corrected.json"

# V√©rification des pr√©requis
check_prerequisites() {
    echo "üîç V√©rification des pr√©requis..."
    
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n'est pas install√©. Veuillez l'installer avant de continuer."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose n'est pas install√©. Veuillez l'installer avant de continuer."
        exit 1
    fi
    
    echo "‚úÖ Pr√©requis valid√©s"
}

# V√©rification du fichier d'environnement
check_env_file() {
    if [ ! -f "$ENV_FILE" ]; then
        echo "‚ö†Ô∏è  Fichier .env non trouv√©, cr√©ation √† partir de .env.example..."
        if [ -f "$ENV_EXAMPLE" ]; then
            cp "$ENV_EXAMPLE" "$ENV_FILE"
            echo "‚úÖ Fichier .env cr√©√©. Veuillez modifier les valeurs avant de continuer."
            exit 0
        else
            echo "‚ùå Fichier .env.example non trouv√©. Impossible de cr√©er le fichier .env."
            exit 1
        fi
    fi
}

# D√©marrage des services
start_services() {
    local build_arg=$1
    echo "üöÄ D√©marrage des services TechnicIA..."
    
    if [ "$build_arg" = "build" ]; then
        docker-compose -f "$COMPOSE_FILE" up -d --build
    else
        docker-compose -f "$COMPOSE_FILE" up -d
    fi
    
    echo "‚è≥ Attente du d√©marrage complet des services..."
    sleep 5
    
    # V√©rifier que tous les services sont up
    if docker-compose -f "$COMPOSE_FILE" ps | grep -q "Exit"; then
        echo "‚ùå Certains services n'ont pas d√©marr√© correctement."
        docker-compose -f "$COMPOSE_FILE" ps
        exit 1
    fi
    
    echo "‚úÖ Services TechnicIA d√©marr√©s avec succ√®s!"
    echo ""
    echo "‚ÑπÔ∏è  Acc√®s aux interfaces:"
    echo "   - n8n: http://localhost:5678"
    echo "   - Qdrant: http://localhost:6333/dashboard"
    echo "   - Frontend: http://localhost:3000"
    echo ""
    echo "üîç Pour importer un workflow n8n, acc√©dez √† http://localhost:5678 et importez les workflows depuis le r√©pertoire /workflows"
}

# Afficher les logs
show_logs() {
    echo "üìã Affichage des logs en temps r√©el (Ctrl+C pour quitter)..."
    docker-compose -f "$COMPOSE_FILE" logs -f
}

# Nettoyage complet
clean_restart() {
    echo "üßπ Nettoyage complet et red√©marrage..."
    
    docker-compose -f "$COMPOSE_FILE" down -v
    echo "‚úÖ Services et volumes supprim√©s"
    
    start_services "build"
}

# Afficher le statut
show_status() {
    echo "üìä Statut des services TechnicIA:"
    docker-compose -f "$COMPOSE_FILE" ps
}

# Arr√™ter les services
stop_services() {
    echo "üõë Arr√™t des services TechnicIA..."
    docker-compose -f "$COMPOSE_FILE" down
    echo "‚úÖ Services arr√™t√©s"
}

# Importer un fichier PDF pour test
import_pdf() {
    local pdf_file=$1
    
    if [ ! -f "$pdf_file" ]; then
        echo "‚ùå Fichier non trouv√©: $pdf_file"
        exit 1
    fi
    
    echo "üìÑ Importation du fichier PDF: $pdf_file"
    
    # V√©rifier que les services sont d√©marr√©s
    if ! docker-compose -f "$COMPOSE_FILE" ps | grep -q "Up"; then
        echo "‚ùå Les services ne sont pas d√©marr√©s. Veuillez les d√©marrer avant d'importer un fichier."
        exit 1
    fi
    
    # Obtenir l'URL du webhook n8n
    echo "‚è≥ Pr√©paration de l'importation..."
    
    # Utiliser curl pour envoyer le fichier
    echo "üì§ Envoi du fichier au service d'ingestion..."
    curl -X POST \
        -F "file=@$pdf_file" \
        http://localhost:5678/webhook/upload \
        -v
    
    echo "‚úÖ Requ√™te d'importation envoy√©e"
    echo "‚ÑπÔ∏è  Suivez l'avancement dans les logs du service document-processor"
}

# Configure n8n avec les workflows optimis√©s
setup_optimized_workflows() {
    echo "üîß Configuration de n8n avec les workflows optimis√©s..."
    
    # V√©rifier que les services sont d√©marr√©s
    if ! docker-compose -f "$COMPOSE_FILE" ps | grep -q "Up"; then
        echo "‚ùå Les services ne sont pas d√©marr√©s. Veuillez les d√©marrer avant de configurer n8n."
        exit 1
    fi
    
    # V√©rifier l'existence des fichiers de workflow optimis√©s
    if [ ! -f "$OPTIMIZED_INGESTION" ] || [ ! -f "$OPTIMIZED_QUESTION" ] || [ ! -f "$OPTIMIZED_DIAGNOSTIC" ]; then
        echo "‚ùå Les fichiers de workflow optimis√©s n'ont pas √©t√© trouv√©s."
        echo "Veuillez v√©rifier que vous avez bien les fichiers suivants:"
        echo "- $OPTIMIZED_INGESTION"
        echo "- $OPTIMIZED_QUESTION"
        echo "- $OPTIMIZED_DIAGNOSTIC"
        exit 1
    fi
    
    echo "üìù Pour importer les workflows optimis√©s, suivez ces √©tapes:"
    echo ""
    echo "1. Acc√©dez √† n8n: http://localhost:5678"
    echo "2. Dans la section 'Workflows', cliquez sur 'Import from File'"
    echo "3. Importez les fichiers suivants dans cet ordre:"
    echo "   - technicia-ingestion-optimized.json"
    echo "   - question-optimized.json"
    echo "   - diagnostic-optimized.json"
    echo "4. Activez chaque workflow en cliquant sur le bouton 'Active'"
    echo ""
    echo "‚ÑπÔ∏è  Pour plus d'informations, consultez le guide: docs/GUIDE_WORKFLOWS_OPTIMISES.md"
}

# Configure n8n avec les workflows corrig√©s
setup_corrected_workflows() {
    echo "üîß Configuration de n8n avec les workflows CORRIG√âS..."
    
    # V√©rifier que les services sont d√©marr√©s
    if ! docker-compose -f "$COMPOSE_FILE" ps | grep -q "Up"; then
        echo "‚ùå Les services ne sont pas d√©marr√©s. Veuillez les d√©marrer avant de configurer n8n."
        exit 1
    fi
    
    # V√©rifier l'existence des fichiers de workflow corrig√©s
    if [ ! -f "$CORRECTED_INGESTION" ] || [ ! -f "$CORRECTED_QUESTION" ] || [ ! -f "$CORRECTED_DIAGNOSTIC" ]; then
        echo "‚ùå Les fichiers de workflow corrig√©s n'ont pas √©t√© trouv√©s."
        echo "Veuillez v√©rifier que vous avez bien les fichiers suivants:"
        echo "- $CORRECTED_INGESTION"
        echo "- $CORRECTED_QUESTION"
        echo "- $CORRECTED_DIAGNOSTIC"
        exit 1
    fi
    
    echo "üìù Pour importer les workflows CORRIG√âS, suivez ces √©tapes:"
    echo ""
    echo "1. Acc√©dez √† n8n: http://localhost:5678"
    echo "2. Dans la section 'Workflows', cliquez sur 'Import from File'"
    echo "3. Importez les fichiers suivants dans cet ordre:"
    echo "   - technicia-ingestion-corrected.json"
    echo "   - question-corrected.json"
    echo "   - diagnostic-corrected.json"
    echo "4. Activez chaque workflow en cliquant sur le bouton 'Active'"
    echo ""
    echo "‚ö†Ô∏è  N'oubliez pas de configurer l'authentification pour Claude:"
    echo "   Settings > Credentials > Add Credential > HTTP Header Auth"
    echo "   - Name: Claude API Authentication"
    echo "   - Name: x-api-key"
    echo "   - Value: <votre cl√© API Anthropic>"
    echo ""
    echo "‚ÑπÔ∏è  Ces workflows corrig√©s sont RECOMMAND√âS pour une compatibilit√© garantie avec les microservices existants."
    echo "‚ÑπÔ∏è  Pour plus d'informations, consultez le guide: docs/GUIDE_WORKFLOWS_CORRIGES.md"
}

# Afficher l'aide
show_help() {
    echo "Usage: $0 [option]"
    echo "Options:"
    echo "  --build           Construit toutes les images Docker"
    echo "  --logs            Affiche les logs en temps r√©el apr√®s le d√©marrage"
    echo "  --clean           Supprime les volumes et red√©marre tout proprement"
    echo "  --status          Affiche le statut des services"
    echo "  --stop            Arr√™te tous les services"
    echo "  --import FILE.pdf Importe un fichier PDF pour test"
    echo "  --setup-optimized Configure n8n avec les workflows optimis√©s"
    echo "  --setup-corrected Configure n8n avec les workflows CORRIG√âS (recommand√©)"
    echo "  -h, --help        Affiche cette aide"
}

# Analyser les arguments
if [ $# -eq 0 ]; then
    check_prerequisites
    check_env_file
    start_services
else
    case "$1" in
        --build)
            check_prerequisites
            check_env_file
            start_services "build"
            ;;
        --logs)
            show_logs
            ;;
        --clean)
            check_prerequisites
            check_env_file
            clean_restart
            ;;
        --status)
            show_status
            ;;
        --stop)
            stop_services
            ;;
        --import)
            if [ -z "$2" ]; then
                echo "‚ùå Aucun fichier sp√©cifi√© pour l'importation"
                show_help
                exit 1
            fi
            import_pdf "$2"
            ;;
        --setup-optimized)
            setup_optimized_workflows
            ;;
        --setup-corrected)
            setup_corrected_workflows
            ;;
        -h|--help)
            show_help
            ;;
        *)
            echo "‚ùå Option non reconnue: $1"
            show_help
            exit 1
            ;;
    esac
fi

exit 0
